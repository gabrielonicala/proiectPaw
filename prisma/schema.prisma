// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  username          String?   @unique
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  verificationToken String?
  verificationTokenExpiry DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Character system
  activeCharacterId String?   // Currently active character
  characterSlots    Int       @default(1) // Number of character slots available (1-3)

  // Subscription fields
  subscriptionStatus String?  @default("inactive") // "active", "inactive", "canceled", "past_due"
  subscriptionId     String?  @unique
  subscriptionPlan   String?  @default("free") // "free", "tribute"
  subscriptionEndsAt DateTime?

  accounts Account[]
  sessions Session[]
  characters Character[]
  entries  JournalEntry[]
  
  // Relations
  activeCharacter Character? @relation("ActiveCharacter", fields: [activeCharacterId], references: [id])
}

model Character {
  id          String   @id @default(cuid())
  userId      String
  name        String   // Character name
  description String?  // Character description/backstory
  theme       String   // Fixed theme for this character
  avatar      String?  // JSON string of character's avatar data
  appearance  String   @default("androgynous") // Character appearance: masculine, feminine, androgynous, custom
  pronouns    String   @default("they/them") // Character pronouns: he/him, she/her, they/them, custom
  customPronouns String? // Custom pronouns if pronouns is 'custom'
  isActive    Boolean  @default(false) // Whether this is the user's active character
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries JournalEntry[]
  activeUsers User[] @relation("ActiveCharacter")
  memory CharacterMemory?
}

model CharacterMemory {
  id          String   @id @default(cuid())
  characterId String   @unique // One memory per character
  memory      String?  // Legacy field - kept for compatibility
  content     String?  // General content field for character memory
  importance  Int      @default(1) // Importance level of the memory (1-10 scale)
  worldState  String?  // JSON string of world state (relationships, locations, ongoing plots)
  summaryLog  String?  // Compressed summary of key events and character growth
  recentEntries String? // JSON array of last 2-3 full entries for tone/style reference
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  characterId String   // Character this entry belongs to
  originalText String
  reimaginedText String?
  imageUrl    String?
  videoUrl    String?
  outputType  String
  pastContext String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}
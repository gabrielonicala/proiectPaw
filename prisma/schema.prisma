generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                      String         @id @default(cuid())
  username                String?        @unique
  email                   String         @unique
  password                String?
  name                    String?
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  verificationToken       String?
  verificationTokenExpiry DateTime?
  resetToken              String?
  resetTokenExpiry        DateTime?
  activeCharacterId       String?
  characterSlots          Int            @default(1)
  subscriptionPlan        String?        @default("free")
  subscriptionStatus      String?        @default("inactive")
  subscriptionId          String?        @unique
  subscriptionEndsAt      DateTime?
  characters              Character[]
  entries                 JournalEntry[]
  activeCharacter         Character?     @relation("ActiveCharacter", fields: [activeCharacterId], references: [id])
}

model Character {
  id               String            @id @default(cuid())
  name             String
  description      String?
  theme            String
  avatar           String?
  appearance       String            @default("androgynous")
  pronouns         String            @default("they/them")
  customPronouns   String?
  userId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(false)
  experience       Int               @default(0)
  level            Int               @default(1)
  stats            String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  memory           CharacterMemory?
  entries          JournalEntry[]
  statProgressions StatProgression[]
  activeUsers      User[]            @relation("ActiveCharacter")
}

model CharacterMemory {
  id            String    @id @default(cuid())
  characterId   String    @unique
  memory        String?
  importance    Int       @default(1)
  createdAt     DateTime  @default(now())
  content       String?
  updatedAt     DateTime  @updatedAt
  worldState    String?
  summaryLog    String?
  recentEntries String?
  lastUpdated   DateTime  @default(now())
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id               String            @id @default(cuid())
  originalText     String
  reimaginedText   String?
  imageUrl         String?
  videoUrl         String?
  outputType       String
  userId           String
  characterId      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  pastContext      String?
  expGained        Int               @default(0)
  statAnalysis     String?
  character        Character         @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  statProgressions StatProgression[]
}

model StatProgression {
  id          String        @id @default(cuid())
  characterId String
  entryId     String?
  statName    String
  oldValue    Int
  newValue    Int
  change      Int
  reason      String
  confidence  Float
  entryText   String?
  analysis    String?
  createdAt   DateTime      @default(now())
  character   Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  entry       JournalEntry? @relation(fields: [entryId], references: [id])
}
